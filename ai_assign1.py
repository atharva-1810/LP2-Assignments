# -*- coding: utf-8 -*-
"""AI_assign1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n3v3IfZwM9v27ezvbFIbpK7lFUxIP0MU
"""

class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, u, v):
        if u not in self.graph:
            self.graph[u] = []
        if v not in self.graph:
            self.graph[v] = []
        self.graph[u].append(v)
        self.graph[v].append(u)

    def dfs_recursive(self, start, visited=None):
        if visited is None:
            visited = set()
        visited.add(start)
        print(start, end=" ")

        for neighbor in self.graph[start]:
            if neighbor not in visited:
                self.dfs_recursive(neighbor, visited)

    def bfs_recursive(self, queue, visited=None):
        if visited is None:
            visited = set()
        if not queue:
            return

        node = queue.pop(0)
        visited.add(node)
        print(node, end=" ")

        for neighbor in self.graph[node]:
            if neighbor not in visited:
                queue.append(neighbor)
                visited.add(neighbor)

        self.bfs_recursive(queue, visited)

# Create a graph
g = Graph()

# Input from user
num_edges = int(input("Enter the number of edges: "))
for _ in range(num_edges):
    u, v = map(int, input("Enter edge (u, v): ").split())
    g.add_edge(u, v)

start_node = int(input("Enter the start node for traversal: "))

print("DFS Recursive:")
g.dfs_recursive(start_node)
print("\nBFS Recursive:")
g.bfs_recursive([start_node])