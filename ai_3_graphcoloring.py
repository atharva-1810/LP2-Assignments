# -*- coding: utf-8 -*-
"""ai_3_graphcoloring.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iwoNKKmFh4VJjI7I7-Hq48v3nLVuzF5m
"""

class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.graph = [[0 for _ in range(vertices)] for _ in range(vertices)]

    def is_safe(self, v, color, color_array):
        for i in range(self.vertices):
            if self.graph[v][i] == 1 and color_array[i] == color:
                return False
        return True

    def graph_coloring_backtracking(self, m, color_array, v=0):
        if v == self.vertices:
            return True

        for color in range(1, m+1):
            if self.is_safe(v, color, color_array):
                color_array[v] = color
                if self.graph_coloring_backtracking(m, color_array, v + 1):
                    return True
                color_array[v] = 0

        return False

    def graph_coloring_branch_and_bound(self, m, color_array, v=0):
        if v == self.vertices:
            return True

        for color in range(1, m+1):
            if self.is_safe(v, color, color_array):
                color_array[v] = color

                # Calculate a lower bound using the number of distinct colors used so far
                distinct_colors = len(set(color_array[:v+1]))

                if distinct_colors < m:
                    if self.graph_coloring_branch_and_bound(m, color_array, v + 1):
                        return True

                color_array[v] = 0

        return False

    def print_solution(self, color_array):
        print("Vertex\tColor")
        for vertex, color in enumerate(color_array):
            print(f"{vertex}\t{color}")

# Example usage with user input
if __name__ == "__main__":
    vertices = int(input("Enter the number of vertices in the graph: "))
    g = Graph(vertices)

    print("Enter the adjacency matrix for the graph (0 for no edge, 1 for edge):")
    for i in range(vertices):
        row = list(map(int, input().split()))
        g.graph[i] = row

    m = int(input("Enter the number of colors: "))
    color_array = [0] * g.vertices

    print("Backtracking Solution:")
    if g.graph_coloring_backtracking(m, color_array):
        g.print_solution(color_array)
    else:
        print("No solution found.")

    print("\nBranch and Bound Solution:")
    if g.graph_coloring_branch_and_bound(m, color_array):
        g.print_solution(color_array)
    else:
        print("No solution found.")