# -*- coding: utf-8 -*-
"""AI_3_Kruskal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r2TmXHIq5m_srGFt_vV5WfeHXOW5VlOt
"""

class DisjointSet:
    def __init__(self, vertices):
        self.parent = {vertex: vertex for vertex in vertices}
        self.rank = {vertex: 0 for vertex in vertices}

    def find(self, vertex):
        if vertex != self.parent[vertex]:
            self.parent[vertex] = self.find(self.parent[vertex])
        return self.parent[vertex]

    def union(self, u, v):
        rootU = self.find(u)
        rootV = self.find(v)

        if rootU != rootV:
            if self.rank[rootU] < self.rank[rootV]:
                self.parent[rootU] = rootV
            elif self.rank[rootU] > self.rank[rootV]:
                self.parent[rootV] = rootU
            else:
                self.parent[rootV] = rootU
                self.rank[rootU] += 1

def kruskal(edges, vertices):
    edges.sort(key=lambda x: x[2])  # Sort edges by weight
    mst = []
    disjoint_set = DisjointSet(vertices)

    for edge in edges:
        start, end, weight = edge
        if disjoint_set.find(start) != disjoint_set.find(end):
            mst.append(edge)
            disjoint_set.union(start, end)

    return mst

# Input from user
num_vertices = int(input("Enter the number of vertices: "))
vertices = set(input(f"Enter the vertices (separated by space): ").split())
edges = [tuple(input(f"Enter edge {i + 1} (start, end, weight): ").split()) for i in range(int(input("Enter the number of edges: ")))]

minimum_spanning_tree = kruskal(edges, vertices)
print("Minimum Spanning Tree (Kruskal's Algorithm):")
for edge in minimum_spanning_tree:
    print(f"{edge[0]} -- {edge[1]}: {edge[2]}")